angular.module("cms.pages", ["ngRoute", "cms.shared"]).constant("_", window._).constant("pages.modulePath", "/Admin/Modules/Pages/Js/"), angular.module("cms.pages").config(["$routeProvider", "shared.routingUtilities", "pages.modulePath", function (e, t, a) { a = t.mapOptions.bind(null, a), e.when("/new", a("AddPage")).when("/:id", a("PageDetails")).otherwise(a("PageList")) }]), angular.module("cms.pages").factory("pages.customEntityService", ["$http", "shared.serviceBase", function (e, t) { return { getAllRoutingRules: function () { return e.get(t + "custom-entity-routing-rules/") } } }]), angular.module("cms.pages").factory("pages.directoryService", ["$http", "_", "shared.serviceBase", function (e, t, a) { var n = {}, o = a + "page-directories"; return n.getAll = function () { return e.get(o) }, n }]), angular.module("cms.pages").factory("pages.pageTemplateService", ["$http", "$q", "shared.serviceBase", function (e, t, a) { var n = {}, o = a + "page-templates"; return n.getAll = function () { var a = t.defer(); return e.get(o).then((function (e) { a.resolve(e.items) }), a.reject), a.promise }, n }]), angular.module("cms.pages").controller("ChangePageUrlController", ["$scope", "$q", "$location", "shared.LoadState", "shared.pageService", "pages.customEntityService", "options", "close", function (e, t, a, n, o, i, r, s) { var l = t.defer(), u = t.defer(); (function () { var t = r.page, a = t.pageRoute; e.isCustomEntityRoute = "CustomEntityDetails" === a.pageType, e.page = t, e.command = { pageId: t.pageId, localeId: a.locale ? a.locale.localeId : void 0, pageDirectoryId: a.pageDirectory.pageDirectoryId }, e.isCustomEntityRoute ? e.command.customEntityRoutingRule = a.urlPath : e.command.urlPath = a.urlPath })(), e.submitLoadState = new n, e.formLoadState = new n(!0), e.save = function () { e.submitLoadState.on(), o.updateUrl(e.command).then(r.onSave).then(s).finally(e.submitLoadState.off) }, e.close = s, e.localesLoaded = l.resolve, e.pageDirectoriesLoaded = u.resolve, e.formLoadState.offWhen(l, u, function () { if (e.isCustomEntityRoute) return i.getAllRoutingRules().then((function (t) { e.routingRules = t })); var a = t.defer(); return a.resolve(), a }()) }]), angular.module("cms.pages").controller("DuplicatePageController", ["$scope", "$q", "$location", "shared.stringUtilities", "shared.LoadState", "shared.pageService", "pages.customEntityService", "options", "close", function (e, t, a, n, o, i, r, s, l) { var u = t.defer(), d = t.defer(); function c() { e.isCustomEntityRoute || (e.command.urlPath = n.slugify(e.command.title, 200)) } function g(e) { a.path("/" + e) } (function () { var t = s.page, a = t.pageRoute; e.isCustomEntityRoute = "CustomEntityDetails" === a.pageType, e.page = t, e.command = { pageToDuplicateId: t.pageId, localeId: a.locale ? a.locale.localeId : void 0, pageDirectoryId: a.pageDirectory.pageDirectoryId, title: "Copy of " + t.latestVersion.title }, e.isCustomEntityRoute ? e.command.customEntityRoutingRule = a.urlPath : c() })(), e.submitLoadState = new o, e.formLoadState = new o(!0), e.save = function () { e.submitLoadState.on(), i.duplicate(e.command).then(g).then(l).finally(e.submitLoadState.off) }, e.close = l, e.onTitleChanged = c, e.localesLoaded = u.resolve, e.pageDirectoriesLoaded = d.resolve, e.formLoadState.offWhen(u, d, function () { if (e.isCustomEntityRoute) return r.getAllRoutingRules().then((function (t) { e.routingRules = t })); var a = t.defer(); return a.resolve(), a }()) }]), angular.module("cms.pages").controller("AddPageController", ["_", "$q", "$location", "$window", "shared.LoadState", "shared.stringUtilities", "shared.urlLibrary", "shared.pageService", "pages.pageTemplateService", "pages.customEntityService", function (e, t, a, n, o, i, r, s, l, u) { var d = this, c = t.defer(), g = t.defer(); function p(t, a) { var n = t ? (d.command.publish = !0, d.saveAndPublishLoadState) : d.saveLoadState; "CustomEntityDetails" == d.command.pageType ? d.command.urlPath = void 0 : d.command.customEntityRoutingRule = void 0, t = n, d.globalLoadState.on(), t && e.isFunction(t.on) && t.on(), s.add(d.command).then(a).finally(function (t) { d.globalLoadState.off(), t && e.isFunction(t.off) && t.off() }.bind(null, n)) } function h(e) { a.path("/" + e) } function m() { var t = "CustomEntityDetails" == (t = d.command.pageType) ? t : "Generic"; d.pageTemplates = e.where(d.allPageTemplates, { pageType: t }) } d.save = p.bind(null, !1, h), d.saveAndPublish = p.bind(null, !0, h), d.saveAndEdit = p.bind(null, !1, (function (e) { return s.getById(e).then((function (e) { n.location.href = r.visualEditorForPage(e.pageRoute, !0) })) })), d.cancel = function () { a.path("/") }, d.onNameChanged = function () { d.command.urlPath = i.slugify(d.command.title, 200) }, d.onPageTypeChanged = m, d.globalLoadState = new o, d.saveLoadState = new o, d.saveAndPublishLoadState = new o, d.formLoadState = new o(!0), d.onLocalesLoaded = c.resolve, d.onPageDirectoriesLoaded = g.resolve, function () { d.pageTypes = s.getPageTypes(), d.command = { showInSiteMap: !0, pageType: d.pageTypes[0].value }; var e = l.getAll().then((function (e) { d.allPageTemplates = e })), t = u.getAllRoutingRules().then((function (e) { d.routingRules = e })); d.formLoadState.offWhen(c, g, e, t).then(m) }() }]), angular.module("cms.pages").controller("PageDetailsController", ["$routeParams", "$q", "$location", "_", "shared.LoadState", "shared.SearchQuery", "shared.modalDialogService", "shared.entityVersionModalDialogService", "shared.urlLibrary", "shared.pageService", "shared.permissionValidationService", "shared.userAreaService", "shared.internalModulePath", "pages.modulePath", function (e, t, a, n, o, i, r, s, l, u, d, c, g, p) { var h = this, m = "COFPGE"; function f(e) { C(e = e ? (h.updateDraftCommand.publish = !0, h.saveAndPublishLoadState) : h.saveLoadState), u.update(h.updatePageCommand).then(u.updateDraft.bind(this, h.updateDraftCommand)).then(v.bind(null, "Changes were saved successfully")).finally(R.bind(null, e)) } function v(e, t) { return y(t).then(h.mainForm.formStatus.success.bind(null, e)) } function y(a) { return t.all([u.getById(e.id).then((function (e) { return h.page = e, h.updatePageCommand = L(e), h.updateDraftCommand = D(e), h.editMode = !1, h.isMarkedPublished = "Published" == h.page.pageRoute.publishStatus, h.publishStatusLabel = P(e.pageRoute), e })), S(), c.getAll().then((function (e) { h.accessRulesEnabled = 1 < e.length }))]).then((function (e) { b(e[1]) })).then(R.bind(null, a)) } function S() { return u.getVersionsByPageId(e.id, h.versionsQuery.getParameters()) } function b(e) { var t = h.page, a = t.pageRoute.isPublished(); n.each(e.items, (function (e) { e.versionLabel = function (e, t) { if ("Draft" == e.workFlowStatus) return e.workFlowStatus; var a = "V" + e.displayVersion; return e.isLatestPublishedVersion ? a + " (" + P(t) + ")" : a }(e, t.pageRoute), e.browseUrl = h.urlLibrary.visualEditorForVersion(t.pageRoute, e, !1, a) })), h.versions = e } function P(e) { return "Published" == e.publishStatus && e.publishDate < Date.now() ? "Pending Publish" : e.publishStatus } function L(e) { return { pageId: e.pageId, tags: e.tags } } function D(e) { var t = e.latestVersion, a = t.openGraph; return { pageId: e.pageId, title: t.title, metaDescription: t.metaDescription, metaTitle:  t.metaTitle, metaKeywords: t.metaKeywords, openGraphTitle: a.title, openGraphDescription: a.description, openGraphImageId: a.image ? a.image.ImageAssetId : void 0, showInSiteMap: t.showInSiteMap } } function w() { a.path("") } function C(e) { h.globalLoadState.on(), e && n.isFunction(e.on) && e.on() } function R(e) { h.globalLoadState.off(), e && n.isFunction(e.off) && e.off() } h.edit = function () { h.editMode = !0, h.mainForm.formStatus.clear() }, h.save = f.bind(null, !1), h.saveAndPublish = f.bind(null, !0), h.cancel = function () { h.editMode = !1, h.updatePageCommand = L(h.page), h.updateDraftCommand = D(h.page), h.mainForm.formStatus.clear() }, h.publish = function () { s.publish(h.page.pageId, C).then(v.bind(null, "Page published successfully.")).catch(R) }, h.unpublish = function () { s.unpublish(h.page.pageId, C).then(v.bind(null, "The page has been unpublished and reverted to draft state.")).catch(R) }, h.discardDraft = function () { var e = { title: "Discard Version", message: "Are you sure you want to discard this draft? This will discard all changes since the page was last published.", okButtonTitle: "Yes, discard it", onOk: function () { return C(), u.removeDraft(h.page.pageId) } }; r.confirm(e).then(v.bind(null, "Draft discarded successfully")) }, h.copyToDraft = function (e) { s.copyToDraft(h.page.pageId, e.pageVersionId, h.page.pageRoute.hasDraftVersion, C).then((function () { v("Draft created successfully.") })).catch(R) }, h.deletePage = function () { var e = { title: "Delete Page", message: "Are you sure you want to delete this page?", okButtonTitle: "Yes, delete it", onOk: function () { return C(), u.remove(h.page.pageId).then(w).catch(R) } }; r.confirm(e) }, h.duplicatePage = function () { r.show({ templateUrl: p + "Routes/Modals/DuplicatePage.html", controller: "DuplicatePageController", options: { page: h.page } }) }, h.changeUrl = function () { r.show({ templateUrl: p + "Routes/Modals/ChangePageUrl.html", controller: "ChangePageUrlController", options: { page: h.page, onSave: v.bind(null, "Url Changed") } }) }, h.viewAccessRules = function () { r.show({ templateUrl: g + "UIComponents/EntityAccess/EntityAccessEditor.html", controller: "EntityAccessEditorController", options: { entityDefinitionCode: m, entityIdPrefix: "page", entityDefinitionName: "Page", entityDescription: h.page.pageRoute.fullUrlPath, entityAccessLoader: function () { return u.getAccessRulesByPageId(h.page.pageId) }, saveAccess: u.updateAccessRules } }) }, h.editMode = !1, h.globalLoadState = new o, h.saveLoadState = new o, h.saveAndPublishLoadState = new o, h.formLoadState = new o(!0), h.versionsLoadState = new o, h.urlLibrary = l, h.versionsQuery = new i({ onChanged: function () { return h.versionsLoadState.on(), S().then(b).then(R.bind(null, h.versionsLoadState)) }, useHistory: !1, defaultParams: { pageSize: 6 } }), h.canCreate = d.canCreate(m), h.canUpdate = d.canUpdate(m), h.canDelete = d.canDelete(m), h.canPublishPage = d.hasPermission(m + "PAGPUB"), h.canUpdatePageUrl = d.hasPermission(m + "UPDURL"), y(h.formLoadState) }]), angular.module("cms.pages").controller("PageListController", ["_", "shared.entityVersionModalDialogService", "shared.LoadState", "shared.SearchQuery", "shared.pageService", "shared.permissionValidationService", "pages.pageTemplateService", function (e, t, a, n, o, i, r) { var s = this; function l(t) { s.isFilterVisible = e.isUndefined(t) ? !s.isFilterVisible : t } function u() { return s.gridLoadState.on(), o.getAll(s.query.getParameters()).then((function (e) { s.result = e, s.gridLoadState.off() })) } s.publishStatus = [{ name: "Unpublished" }, { name: "Published" }], r.getAll().then((function (e) { s.pageTemplates = e })), s.gridLoadState = new a, s.globalLoadState = new a, s.query = new n({ onChanged: function () { l(!1), u() } }), s.filter = s.query.getFilters(), s.toggleFilter = l, l(!1), s.publish = function (e) { t.publish(e, s.globalLoadState.on).then(u).then(s.globalLoadState.off).catch(s.globalLoadState.off) }, s.canCreate = i.canCreate("COFPGE"), s.canUpdate = i.canUpdate("COFPGE"), u() }]);